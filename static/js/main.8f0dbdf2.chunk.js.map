{"version":3,"sources":["images/original-bechdel.png","images/behind-the-camera.png","images/intersectional.png","images/compiled-list.png","Story.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Story","useState","currentStepIndex","setCurrentStepIndex","onStepEnter","data","className","key","href","target","src","originalBechdel","behindCamera","intersectional","compiledList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,0QC+J5BC,EAvJD,WAAO,IAAD,EAC8BC,mBAAS,MADvC,mBACXC,EADW,KACOC,EADP,KAGZC,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrBF,EAAoBE,IAGtB,OACE,oCACE,oEACA,0FACA,iEAEA,yBAAKC,UAAU,gBAAf,UAAsCJ,GAEtC,yBAAKI,UAAU,WACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAWF,YAAaA,GACtB,kBAAC,IAAD,CAAMC,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,kBAAf,oCACoC,IAClC,uBACEE,KAAK,qDACLC,OAAO,KAFT,SAKK,IAPP,sEAUE,4BACE,gFACA,kHAON,kBAAC,IAAD,CAAMJ,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,kBAAf,+EAKF,kBAAC,IAAD,CAAMD,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,kBAAf,6GAQN,yBAAKA,UAAU,gBACb,yBAAKI,IAAKC,IAAiBL,UAAU,YAIzC,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAWF,YAAaA,GACtB,kBAAC,IAAD,CAAMC,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,yBAAf,gHAEiD,IAC/C,8EAHF,qGAUJ,yBAAKA,UAAU,gBACb,yBAAKI,IAAKE,IAAcN,UAAU,WAGpC,kBAAC,IAAD,CAAWF,YAAaA,GACtB,kBAAC,IAAD,CAAMC,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,yBAAf,mIAKF,kBAAC,IAAD,CAAMD,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,yBAAf,sGAQN,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACb,yBAAKI,IAAKG,IAAgBP,UAAU,WAGtC,kBAAC,IAAD,CAAWF,YAAaA,GACtB,kBAAC,IAAD,CAAMC,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,uCAAf,0EAON,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,6BACb,yBAAKI,IAAKI,IAAcR,UAAU,WAGpC,kBAAC,IAAD,CAAWF,YAAaA,GACtB,kBAAC,IAAD,CAAMC,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,yBAAf,yFAKF,kBAAC,IAAD,CAAMD,KAAM,EAAGE,IAAK,GAClB,yBAAKD,UAAU,yBAAf,+GAQN,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,qBAAd,oBACA,kBAAC,IAAD,CAAWF,YAAaA,GACtB,kBAAC,IAAD,CAAMC,KAAM,GAAIE,IAAK,IACnB,yBAAKD,UAAU,uCAAf,wGAKF,kBAAC,IAAD,CAAMD,KAAM,GAAIE,IAAK,IACnB,yBAAKD,UAAU,yBAAf,kKAMF,kBAAC,IAAD,CAAMD,KAAM,GAAIE,IAAK,IACnB,yBAAKD,UAAU,yBAAf,yCC3IGS,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f0dbdf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/original-bechdel.e3fad102.png\";","module.exports = __webpack_public_path__ + \"static/media/behind-the-camera.084d917b.png\";","module.exports = __webpack_public_path__ + \"static/media/intersectional.7a321367.png\";","module.exports = __webpack_public_path__ + \"static/media/compiled-list.e8fb39ad.png\";","import React, { useState } from \"react\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport \"./Story.css\";\nimport originalBechdel from \"./images/original-bechdel.png\";\nimport behindCamera from \"./images/behind-the-camera.png\";\nimport intersectional from \"./images/intersectional.png\";\nimport compiledList from \"./images/compiled-list.png\";\n\nconst Story = () => {\n  const [currentStepIndex, setCurrentStepIndex] = useState(null);\n\n  const onStepEnter = ({ data }) => {\n    setCurrentStepIndex(data);\n  };\n\n  return (\n    <>\n      <h1>Practice with Scrollama ðŸ¦™</h1>\n      <h2>A walkthrough of FiveThirtyEight's \"The New Bechdel Test\"</h2>\n      <p>Made with ðŸ’™ by Michelle</p>\n\n      <div className=\"step-counter\">Step # {currentStepIndex}</div>\n\n      <div className=\"section\">\n        <div className=\"scroller\">\n          <Scrollama onStepEnter={onStepEnter}>\n            <Step data={1} key={1}>\n              <div className=\"step-container\">\n                In 2016, FiveThirtyEight wrote an{\" \"}\n                <a\n                  href=\"https://projects.fivethirtyeight.com/next-bechdel/\"\n                  target=\"_\"\n                >\n                  essay\n                </a>{\" \"}\n                about the Bechdel Test, which asks two simple questions of a\n                movie:\n                <ol>\n                  <li>Does it have at least 2 named female characters?</li>\n                  <li>\n                    And do those characters have at least one conversation that\n                    is not about a man?\n                  </li>\n                </ol>\n              </div>\n            </Step>\n            <Step data={2} key={2}>\n              <div className=\"step-container\">\n                They took the top 50 movies of 2016 evaluated them using the\n                Bechdel Test.\n              </div>\n            </Step>\n            <Step data={3} key={3}>\n              <div className=\"step-container\">\n                I like the simple dot visualization (when you hover over them,\n                it shows you what movie it represents).\n              </div>\n            </Step>\n          </Scrollama>\n        </div>\n\n        <div className=\"half-graphic\">\n          <img src={originalBechdel} className=\"image\" />\n        </div>\n      </div>\n\n      <div className=\"section column\">\n        <Scrollama onStepEnter={onStepEnter}>\n          <Step data={4} key={4}>\n            <div className=\"step-container skinny\">\n              But then they took it further. They then reached out to over a\n              dozen women in film/television and asked them:{\" \"}\n              <strong>What does the next Bechdel Test look like?</strong> They\n              created a bunch of new tests based on different criteria having to\n              do with gender equity.\n            </div>\n          </Step>\n        </Scrollama>\n\n        <div className=\"full-graphic\">\n          <img src={behindCamera} className=\"image\" />\n        </div>\n\n        <Scrollama onStepEnter={onStepEnter}>\n          <Step data={5} key={5}>\n            <div className=\"step-container skinny\">\n              They evaluated the same top 50 movies of 2016, which did decently\n              on some tests, and super horribly on others (like this one).\n            </div>\n          </Step>\n          <Step data={6} key={6}>\n            <div className=\"step-container skinny\">\n              The tests are broken into categories. This one falls under \"Tests\n              that look behind the camera.\"\n            </div>\n          </Step>\n        </Scrollama>\n      </div>\n\n      <div className=\"section column\">\n        <div className=\"full-graphic\">\n          <img src={intersectional} className=\"image\" />\n        </div>\n\n        <Scrollama onStepEnter={onStepEnter}>\n          <Step data={7} key={7}>\n            <div className=\"step-container skinny no-top-margin\">\n              Here's one from the category \"Tests that look beyond white women.\"\n            </div>\n          </Step>\n        </Scrollama>\n      </div>\n\n      <div className=\"section column\">\n        <div className=\"full-graphic stick-middle\">\n          <img src={compiledList} className=\"image\" />\n        </div>\n\n        <Scrollama onStepEnter={onStepEnter}>\n          <Step data={8} key={8}>\n            <div className=\"step-container skinny\">\n              At the end, they compiled all the tests and showed how each movie\n              performed overall.\n            </div>\n          </Step>\n          <Step data={9} key={9}>\n            <div className=\"step-container skinny\">\n              The movies are sorted by how many tests they passed, so the ones\n              we see here performed the best overall.\n            </div>\n          </Step>\n        </Scrollama>\n      </div>\n\n      <div className=\"section column\">\n        <h2 className=\"conclusion-header\">In conclusion...</h2>\n        <Scrollama onStepEnter={onStepEnter}>\n          <Step data={10} key={10}>\n            <div className=\"step-container skinny no-top-margin\">\n              I love how this piece expanded my understanding of what goes into\n              making movies that empower women.\n            </div>\n          </Step>\n          <Step data={11} key={11}>\n            <div className=\"step-container skinny\">\n              Everyone's always talking about having more female protagonists,\n              but I hadn't thought about the effect of having a diverse\n              supporting cast or a diverse crew.\n            </div>\n          </Step>\n          <Step data={12} key={12}>\n            <div className=\"step-container skinny\">Thanks for reading! ðŸŽ¬</div>\n          </Step>\n        </Scrollama>\n      </div>\n    </>\n  );\n};\n\nexport default Story;\n","import React from \"react\";\nimport \"./App.css\";\nimport Story from \"./Story.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Story />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}